// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String          @id @default(cuid())
  name          String          @unique
  password      String
  family        family[]
  photo         String?
  message       message[]
  post          post[]
  reaction      reaction[]
  head          head[]
  familyRequest familyRequest[]
}

model family {
  id            String          @id @default(cuid())
  name          String          @unique
  members       user[]
  photo         String?
  message       message[]
  head          head[]
  familyRequest familyRequest[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
}

enum Request {
  ask
  invite
}

model familyRequest {
  id       String   @id @default(cuid())
  about    String?
  user     user     @relation(fields: [userId], references: [id])
  userId   String
  family   family   @relation(fields: [familyId], references: [id])
  familyId String
  type     Request?
}

model head {
  id       String @id @default(cuid())
  user     user   @relation(fields: [userId], references: [id])
  family   family @relation(fields: [familyId], references: [id])
  userId   String
  familyId String @unique
}

model message {
  id        String   @id @default(cuid())
  text      String
  photo     String?
  user      user     @relation(fields: [userId], references: [id])
  family    family   @relation(fields: [familyId], references: [id])
  userId    String
  familyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model post {
  id        String     @id @default(cuid())
  text      String?
  photo     String?
  user      user       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reaction  reaction[]
}

enum ReactionType {
  like
  cool
  nocare
}

model reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  user      user         @relation(fields: [userId], references: [id])
  post      post         @relation(fields: [postId], references: [id])
  userId    String
  postId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}
